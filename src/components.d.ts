/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { NWCC_INPUT_TYPE } from "./components/uiw-input/uiw-base-input";
import { AsyncValidatorFn, ErrorMessage, ValidatorFn } from "./global/errorHandler";
export namespace Components {
    interface UiwInput {
        /**
          * There are 2 options to validate, either pass the sync/async validation or listen to changes and update error message Depending on usage we might end up killing passing of error message or asyncValidators
         */
        "asyncValidators": AsyncValidatorFn[];
        "counter": number;
        "disabled": boolean;
        "elementRef": () => Promise<HTMLInputElement>;
        "error": string;
        "formatter"?: (
        value: string,
        target: HTMLInputElement
    ) => string | undefined;
        "inputmode": string;
        "label": string;
        /**
          * Icon shown inside the input field
         */
        "leftIcon": string;
        "maxlength": number;
        "name": string;
        "note": string;
        "placeholder": string;
        "postfix": string;
        "required": boolean;
        /**
          * Used for localization of translations
         */
        "translations"?: {
        required?: string
        invalidEmail?: string
    };
        "type": NWCC_INPUT_TYPE;
        /**
          * There are 2 options to validate, either pass the sync/async validation or listen to changes and update error message Depending on usage we might end up killing passing of error message or validators
         */
        "validators": ValidatorFn[];
        "value": string;
    }
    interface UiwSlider {
        "disabled": boolean;
        "error": string;
        "label": string;
        "max": number;
        "min": number;
        "postfix": string;
        "required": boolean;
        "stepSize": number;
        "sublabel": string;
        "translations"?: {
    ariaLabels?: {
      slider?: string;
      decrease?: string;
      inputField?: string;
    }
    error?: ErrorMessage
  };
        "validators": ValidatorFn[];
        "value": number;
    }
}
declare global {
    interface HTMLUiwInputElement extends Components.UiwInput, HTMLStencilElement {
    }
    var HTMLUiwInputElement: {
        prototype: HTMLUiwInputElement;
        new (): HTMLUiwInputElement;
    };
    interface HTMLUiwSliderElement extends Components.UiwSlider, HTMLStencilElement {
    }
    var HTMLUiwSliderElement: {
        prototype: HTMLUiwSliderElement;
        new (): HTMLUiwSliderElement;
    };
    interface HTMLElementTagNameMap {
        "uiw-input": HTMLUiwInputElement;
        "uiw-slider": HTMLUiwSliderElement;
    }
}
declare namespace LocalJSX {
    interface UiwInput {
        /**
          * There are 2 options to validate, either pass the sync/async validation or listen to changes and update error message Depending on usage we might end up killing passing of error message or asyncValidators
         */
        "asyncValidators"?: AsyncValidatorFn[];
        "counter"?: number;
        "disabled"?: boolean;
        "error"?: string;
        "formatter"?: (
        value: string,
        target: HTMLInputElement
    ) => string | undefined;
        "inputmode"?: string;
        "label": string;
        /**
          * Icon shown inside the input field
         */
        "leftIcon"?: string;
        "maxlength"?: number;
        "name"?: string;
        "note"?: string;
        "onNwccInputBlur"?: (event: CustomEvent<string>) => void;
        "onNwccInputChange"?: (event: CustomEvent<string>) => void;
        "onNwccInputFocus"?: (event: CustomEvent<FocusEvent>) => void;
        "onNwccInputKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        "onNwccInputValidate"?: (event: CustomEvent<string>) => void;
        "onNwccInputValidateDebounced"?: (event: CustomEvent<string>) => void;
        "onUiwInputChange"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated use nwccInputValidate
         */
        "onValidate"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated use nwccInputValidateDebounced
         */
        "onValidatedebounced"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "postfix"?: string;
        "required"?: boolean;
        /**
          * Used for localization of translations
         */
        "translations"?: {
        required?: string
        invalidEmail?: string
    };
        "type"?: NWCC_INPUT_TYPE;
        /**
          * There are 2 options to validate, either pass the sync/async validation or listen to changes and update error message Depending on usage we might end up killing passing of error message or validators
         */
        "validators"?: ValidatorFn[];
        "value"?: string;
    }
    interface UiwSlider {
        "disabled"?: boolean;
        "error"?: string;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "onUiwSliderInputChange"?: (event: CustomEvent<string>) => void;
        "postfix"?: string;
        "required"?: boolean;
        "stepSize"?: number;
        "sublabel"?: string;
        "translations"?: {
    ariaLabels?: {
      slider?: string;
      decrease?: string;
      inputField?: string;
    }
    error?: ErrorMessage
  };
        "validators"?: ValidatorFn[];
        "value"?: number;
    }
    interface IntrinsicElements {
        "uiw-input": UiwInput;
        "uiw-slider": UiwSlider;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "uiw-input": LocalJSX.UiwInput & JSXBase.HTMLAttributes<HTMLUiwInputElement>;
            "uiw-slider": LocalJSX.UiwSlider & JSXBase.HTMLAttributes<HTMLUiwSliderElement>;
        }
    }
}
